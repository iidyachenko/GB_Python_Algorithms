"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

""" с точки зрения производительности намного хуже чем циклы, 
если разбить на две функции для четного и нечетного будет быстрее"""


def num_type(num):
    if num == 0:
        return 0, 0
    else:
        if num % 2 == 0:
            return 1 + num_type(num // 10)[0], num_type(num // 10)[1]
        else:
            return num_type(num // 10)[0], num_type(num // 10)[1] + 1


n = int(input("Введите число:"))
print("Количество четных и нечетных цифр в числе равно: ", num_type(n))
